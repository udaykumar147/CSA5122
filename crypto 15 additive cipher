#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

void removeSpaces(char *str) {
    int count = 0;
    for (int i = 0; str[i]; i++) {
        if (str[i] != ' ')
            str[count++] = str[i];
    }
    str[count] = '\0';
}

void decrypt_caesar(char *ciphertext, int shift) {
    int len = strlen(ciphertext);
    printf("Shift: %d\n", shift);
    printf("Decrypted Text: ");
    for (int i = 0; i < len; i++) {
        char decrypted_char = ciphertext[i];
        if (isalpha(ciphertext[i])) {
            if (isupper(ciphertext[i])) {
                decrypted_char = ((ciphertext[i] - 'A' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'A';
            } else {
                decrypted_char = ((ciphertext[i] - 'a' - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a';
            }
        }
        printf("%c", decrypted_char);
    }
    printf("\n\n");
}

void frequency_attack_caesar(char *ciphertext, int top_n) {
    int letter_count[ALPHABET_SIZE] = {0};
    int len = strlen(ciphertext);

    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            if (isupper(ciphertext[i])) {
                letter_count[ciphertext[i] - 'A']++;
            } else {
                letter_count[ciphertext[i] - 'a']++;
            }
        }
    }

    printf("Frequency Analysis:\n");
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        printf("%c: %d\n", 'A' + i, letter_count[i]);
    }
    printf("\n");

    // Find the most frequent letter in the ciphertext
    int max_frequency = 0;
    char max_letter;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (letter_count[i] > max_frequency) {
            max_frequency = letter_count[i];
            max_letter = 'A' + i;
        }
    }

    // Calculate shift for Caesar cipher
    int shift = (max_letter - 'E' + ALPHABET_SIZE) % ALPHABET_SIZE;

    decrypt_caesar(ciphertext, shift);
}

int main() {
    char ciphertext[] = "Wkh vhfuhw phvvdjh lv dq lqirupdwlrq iru wkh erjqhqw kdqgob vwhdphq, wr euhdwk wkh frgh rq wkh wklug kxqguhg, zlwk wkh ehvw kdqgob vwhdphq lv dq lqirupdwlrq iru wkh erjqhqw hqgr"
    int top_n = 10; // Top N possible plaintexts to display

    removeSpaces(ciphertext);

    printf("Ciphertext: %s\n\n", ciphertext);

    frequency_attack_caesar(ciphertext, top_n);

    return 0;
}
